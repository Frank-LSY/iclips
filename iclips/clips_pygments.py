# -*- coding: utf-8 -*-

"""Lexers for CLIPS language."""

import re

from pygments.lexer import RegexLexer
from pygments.token import Number, Punctuation, String
from pygments.token import Text, Comment, Operator, Keyword, Name


__all__ = ['CLIPSLexer']


class CLIPSLexer(RegexLexer):
    """A CLIPS lexer, parsing a stream and outputting the tokens
    needed to highlight CLIPS code.

    """
    name = 'CLIPS'
    aliases = ['clips', 'clp']
    filenames = ['*.clp']
    mimetypes = ['text/x-clips', 'application/x-clips']
    keywords = ('SYMBOL',
                'STRING',
                'INTEGER',
                'FLOAT',
                'crlf',
                'object',
                'deftemplate',
                'deffunction',
                'defmodule',
                'defrule',
                'defclass',
                'defglobal',
                'test',
                'and',
                'or',
                'eq',
                'neq',
                'name',
                'is-a',
                'type',
                'slot',
                'multislot',
                't')
    builtins = ('!=',
                '*',
                '**',
                '+',
                '-',
                '/',
                '<',
                '<=',
                '<>',
                '=',
                '>',
                '>=',
                'abs',
                'acos',
                'acosh',
                'acot',
                'acoth',
                'acsc',
                'acsch',
                'active-duplicate-instance',
                'active-initialize-instance',
                'active-make-instance',
                'active-message-duplicate-instance',
                'active-message-modify-instance',
                'active-modify-instance',
                'agenda',
                'and',
                'any-instancep',
                'apropos',
                'asec',
                'asech',
                'asin',
                'assert',
                'cot',
                'coth',
                'create$',
                'csc',
                'csch',
                'defclass-module',
                'deffacts-module',
                'deffunction-module',
                'defgeneric-module',
                'defglobal-module',
                'definstances-module',
                'defrule-module',
                'deftemplate-module',
                'deg-grad',
                'deg-rad',
                'delayed-do-for-all-instances',
                'delete$',
                'delete-instance',
                'dependencies',
                'dependents',
                'describe-class',
                'direct-mv-delete',
                'direct-mv-insert',
                'direct-mv-replace',
                'div',
                'do-for-all-instances',
                'do-for-instance',
                'dribble-off',
                'dribble-on',
                'duplicate',
                'duplicate-instance',
                'duplicate-instance',
                'dynamic-get',
                'dynamic-put',
                'edit',
                'eq',
                'eval',
                'evenp',
                'exit',
                'exp',
                'expand$',
                'explode$',
                'fact-existp',
                'halt',
                'if',
                'implode$',
                'init-slots',
                'initialize-instance',
                'initialize-instance',
                'insert$',
                'instance-address',
                'instance-addressp',
                'instance-existp',
                'instance-name',
                'instance-name-to-symbol',
                'instance-namep',
                'instancep',
                'instances',
                'integer',
                'integerp',
                'length',
                'length$',
                'lexemep',
                'list-defclasses',
                'list-deffacts',
                'list-deffunctions',
                'list-defgenerics',
                'list-defglobals',
                'list-definstances',
                'list-defmessage-handlers',
                'list-defmethods',
                'list-defmodules',
                'list-defrules',
                'list-deftemplates',
                'list-focus-stack',
                'list-watch-items',
                'load',
                'load*',
                'load-facts',
                'load-instances',
                'log',
                'log10',
                'loop-for-count',
                'lowcase',
                'make-instance',
                'ppdefclass',
                'ppdeffacts',
                'ppdeffunction',
                'ppdefgeneric',
                'ppdefglobal',
                'ppdefinstances',
                'ppdefmessage-handler',
                'ppdefmethod',
                'ppdefmodule',
                'ppdefrule',
                'ppdeftemplate',
                'ppinstance',
                'preview-generic',
                'preview-send',
                'primitives-info',
                'print-region',
                'printout',
                'progn',
                'progn$',
                'put',
                'rad-deg',
                'random',
                'read',
                'readline',
                'refresh',
                'refresh-agenda',
                'release-mem',
                'remove',
                'remove-break',
                'rename',
                'replace$',
                'reset',
                'rest$',
                'restore-instances',
                'retract',
                'return',
                'round',
                'rule-complexity',
                'rules',
                'run',
                'save',
                'save-facts',
                'save-instances',
                'str-assert',
                'str-cat',
                'str-compare',
                'str-explode',
                'str-implode',
                'str-index',
                'str-length',
                'stringp',
                'sub-string',
                'subclassp',
                'subseq$',
                'subset',
                'subsetp',
                'superclassp',
                'switch',
                'sym-cat',
                'symbol-to-instance-name',
                'symbolp',
                'system',
                'tan',
                'tanh',
                'time',
                'toss',
                'type',
                'type',
                'undefclass',
                'undeffacts',
                'undeffunction',
                'undefgeneric',
                'undefglobal',
                'undefinstances',
                'undefmessage-handler',
                'undefmethod',
                'undefrule',
                'undeftemplate',
                'unmake-instance',
                'unwatch',
                'upcase',
                'watch',
                'while',
                'wordp')
    valid_name = r'[\w!$%*+,/:<=>@^~|-]+'
    tokens = {'root': ((r';.*$', Comment.Single),
                       (r'\s+', Text),
                       (r'-?\d+\.\d+', Number.Float),
                       (r'-?\d+', Number.Integer),
                       (r'"(\\\\|\\"|[^"])*"', String),
                       (r'(TRUE|FALSE|nil)', Name.Constant),
                       (r"('|#|`|,@|,|\.)", Operator),
                       (r'(%s)' % '|'.join(re.escape(entry)
                                           for entry in keywords),
                        Keyword),
                       (r"(?<=\()(%s)" % '|'.join(re.escape(entry)
                                                  for entry in builtins),
                        Name.Builtin),
                       (r'(?<=\()' + valid_name, Name.Function),
                       (r'\?' + valid_name, Name.Variable),
                       (r'(\(|\))', Punctuation),
                       (r'(\[|\])', Punctuation),
                       (valid_name, Text))}
